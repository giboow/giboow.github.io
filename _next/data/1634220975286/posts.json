{"pageProps":{"posts":[{"id":"comment-transcoder-une-video-avec-springboot-et-ffmpeg","author":"giboow","title":"Comment construire un transcodeur vid√©o avec SpringBoot et FFMPEG !","date":"2021-10-12","keywords":["Video","Transcoder","SpringBoot","FFMpeg","Java"],"image":"/static/images/post/proxy-transcoder-ffmpeg/main.jpg","contentHtml":"<p>J'ai r√©cemment commenc√© √† travailler sur un syst√®me de cam√©ras de surveillance et je souhaite pouvoir afficher les vid√©os collect√©es sur des pages Web.\n√Ä premi√®re vue, cela semblait tr√®s facile, mais je me suis vite rendu compte que je devais me creuser la t√™te!</p>\n<h1>Comment cela doit fonctionner?</h1>\n<p>La cam√©ra est connect√©e √† un NVR (Numeric Video recorder) qui poss√®de une API permettant de r√©cup√©rer les informations de configuration et le flux vid√©o. En cherchant un peu sur le Web (Oui la documentation est difficile d'acc√®s..), je d√©couvre que le protocole de communication utilis√© par le NVR est le RTSP (Real-Time Streaming Protocol). C'est l√† que je rencontre le principal probl√®me ! Comment utiliser ce protocole dans une page HTML qui ne le supporte pas ? Ma solution est d'utiliser un serveur qui permet de transcoder la vid√©o dans un format plus connu (MP4) et un protocole ultra standard (Http). Cela me permettra √©galement de cacher les identifiants d'acc√®s √† la cam√©ra en utilisant mon serveur comme un proxy.</p>\n<p><img src=\"https://giboow.fr/static/images/post/proxy-transcoder-ffmpeg/graph-ffmpeg-transcoder.png\" alt=\"Graph it should work\"></p>\n<h1>Alors comment on fait √ßa?</h1>\n<p>Un excellent outil bien connu pour faire de la conversion vid√©o est <a href=\"https://www.ffmpeg.org/\">FFMPeg</a>, donc je commence √† regarder comment je peux l'utiliser pour convertir RSTP. Je trouve rapidement une ligne de commande qui fonctionne :</p>\n<pre><code>ffmpeg -y -loglevel level+info -n -re -acodec pcm_s16le -rtsp_transport tcp -i rtsp://user:passwd@192.168.1.200:554/ISAPI/Streaming/channels/101/live -vcodec copy -af asetrate=22050 -acodec aac -b:a 96k -nostdin myvideo.mp4\n</code></pre>\n<p>Alors comment faire un proxy avec SpringBoot ? C'est tr√®s simple en fait, il suffit d'utiliser l'objet <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/StreamingResponseBody.html\">StreamingResponseBody</a>. Cela permet de renvoyer un traitement asynchrone de la requ√™te, o√π l'application peut √©crire directement sur le flux de sortie de la r√©ponse sans bloquer le reste de mon API.</p>\n<p>Enfin, il me suffit d'utiliser FFMPEG dans mon contr√¥leur pour envoyer le flux via mon API. J'aurais pu utiliser \" Runtime.getRuntime().exec(\" ffmpeg...) \" mais je n'arrivais pas √† trouver comment obtenir mon flux. Heureusement, j'ai trouv√© une biblioth√®que magique <a href=\"https://github.com/kokorin/Jaffree\">Jaffree</a> : \"Jaffree stands for JAva FFmpeg and FFprobe FREE command line wrapper. Jaffree supports programmatic video production and consumption (with transparency)\"</p>\n<h1>La solution</h1>\n<p>Voici la solution finale et comment relayer un flux vid√©o provenant d'une cam√©ra HikVision afin que le format soit utilisable par une page HTML.</p>\n<pre><code>import com.github.kokorin.jaffree.StreamType;\nimport com.github.kokorin.jaffree.ffmpeg.FFmpeg;\nimport com.github.kokorin.jaffree.ffmpeg.PipeOutput;\n\n@RestController\n@RequestMapping(\"/video\")\n@Log4j2\npublic class VideoController {\n    @GetMapping(value = \"/live.mp4\")\n    @ResponseBody\n    public ResponseEntity&#x3C;StreamingResponseBody> livestream(@PathVariable(\"id\") Long tipperId) throws Exception {\n\n        String rtspUrl = \"rtsp://user:passwd@192.168.1.200:554/ISAPI/Streaming/channels/101/live\";\n\n        return ResponseEntity.ok()\n                .contentType(MediaType.APPLICATION_OCTET_STREAM)\n                .body(os -> {\n                    FFmpeg.atPath()\n                            .addArgument(\"-re\")\n                            .addArguments(\"-acodec\", \"pcm_s16le\")\n                            .addArguments(\"-rtsp_transport\", \"tcp\")\n                            .addArguments(\"-i\", $rtspUrl)\n                            .addArguments(\"-vcodec\", \"copy\")\n                            .addArguments(\"-af\", \"asetrate=22050\")\n                            .addArguments(\"-acodec\", \"aac\")\n                            .addArguments(\"-b:a\", \"96k\" )\n                            .addOutput(PipeOutput.pumpTo(os)\n                                    .disableStream(StreamType.AUDIO)\n                                    .disableStream(StreamType.SUBTITLE)\n                                    .disableStream(StreamType.DATA)\n                                    .setFrameCount(StreamType.VIDEO, 100L)\n                                     //1 frame every 10 seconds\n                                    .setFrameRate(0.1)\n                                    .setDuration(1, TimeUnit.HOURS)\n                                    .setFormat(\"ismv\"))\n                            .addArgument(\"-nostdin\")\n                            .execute();\n                });\n\n    }\n}\n</code></pre>\n<p>Vous devrez √©galement modifier la configuration de votre application SpringBoot (fichier application.properties) pour augmenter le d√©lai d'attente pour les requ√™tes asynchrones.</p>\n<pre><code>spring.mvc.async.request-timeout = 3600000\n</code></pre>\n<p>Il vous suffit d'appeler votre API sur la page web :</p>\n<pre><code>&#x3C;div class=\"video\">\n  &#x3C;video width=\"100%\" height=\"auto\" controls autoplay muted loop *ngIf=\"event?.video\">\n    &#x3C;source src=\"http://localhost:8080/video/live.mp4\"\n            type=\"video/mp4\">\n    Sorry, your browser doesn't support embedded videos.\n  &#x3C;/video>\n&#x3C;/div>\n</code></pre>\n<p>Et voici le r√©sultat :</p>\n<p><img src=\"https://giboow.fr/static/images/post/proxy-transcoder-ffmpeg/result-ffmpeg-transcoder.png\" alt=\"Final result\"></p>\n<p>Facile non?</p>\n<p><a href=\"https://dev.to/giboow/how-to-build-a-video-transcoder-with-springboot-and-ffmpeg-n7p\">Retrouvez l'article anglais sur dev.to</a></p>\n"},{"id":"android-emulator-apple-silicon","author":"giboow","title":"Android Emulator sur Apple Silicon, enfin une preview!","date":"2020-12-06","keywords":["Android","Android Emulator","Apple Silicon","AppleM1"],"image":"/static/images/post/android-apple.png","contentHtml":"<p>Bonsoir √† tous!</p>\n<p>J'ai r√©cemment craqu√© pour le nouveau MacBook Pro M1! Depuis 1 semaine que je l'apprivoise, toutes les applications\nque j'utilise fonctionnent (merci Rosetta2!). Mon seul probl√®me, en tant que developpeur mobile, est que l'Emulateur\nAndroid ne fonctionne pas. C'est\nd'ailleurs le probl√®me de toutes les applications qui font de la virtualisation (Docker, ParallelDesktop, etc ‚Ä¶)!\nJe dois donc utiliser un t√©l√©phone physique, et cela m'emp√™che de tester mes applications sur diff√©rentes versions\nd'Android.</p>\n<p>Heureusement les ing√©nieurs de Google sont √† fond sur le  coup et ont mis √† disposition une version Preview de\nl'√©mulateur ici : <a href=\"https://androidstudio.googleblog.com/2020/12/android-emulator-apple-silicon-preview.html\">https://androidstudio.googleblog.com/2020/12/android-emulator-apple-silicon-preview.html</a></p>\n<p>Et √ßa fonctionne :</p>\n<p><img src=\"/static/images/post/capture_android_emulator_preview.png\" alt=\"Capture Android preview\"></p>\n<p>Pour autant tout n'est pas parfait :</p>\n<ul>\n<li>Les Webview ne fonctionnent pas</li>\n<li>Pas de son</li>\n<li>Pas de skin t√©l√©phone</li>\n<li>Les codecs vid√©os ne sont pas fonctionnels</li>\n<li>Les applications ARM 32Bits ne sont pas compatibles</li>\n<li>Quelques bugs graphiques sur les applications utilisant l'API Vulkan</li>\n<li>Une popup apparait au d√©marrage de l'√©mulateur, indiquant qu'elle ne trouve pas ADB</li>\n</ul>\n<p>Tout est dit! Il ne reste plus qu'√† tester üòÉ.</p>\n<p>Amusez-vous bien!</p>\n"},{"id":"comment-configurer-postgresql-avec-pgtune","author":"giboow","title":"Comment bien configurer son serveur Postgres avec PGTune","date":"2020-12-02","keywords":["Postgresql","Tunning","Performances"],"image":"/static/images/post/pgtune.png","contentHtml":"<p>R√©cemment, j'ai d√ª mettre le nez dans les serveurs de notre application, car nous avions des probl√®mes de performances\net de stabilit√©.</p>\n<p>Pour vous replanter le d√©cor, l'application dont je m'occupe aujourd'hui est h√©berg√© sur un serveur qui comprend un\nservice de base de donn√©es Postgres, un serveur d'application Java, ainsi que d'un serveur apache permettant aux\nutilisateurs de t√©l√©charger le front. Tout √ßa fonctionne sur le m√™me serveur sans conteneurs. N'ayant pas install√© ces\nservices moi-m√™me, j'ai d√ª passer un peu de temps pour comprendre pourquoi notre serveur plantait lors de fortes\ncharges... Puis je me suis aper√ßu gr√¢ce √† notre syst√®me de monitoring que la m√©moire du serveur Postgres n'√©tait m√™me\npas limit√©e...</p>\n<p>Je n'ai aucune connaissance sur les configurations des services Postgres, et comme je n'aime pas trop perdre de temps √†\n√©plucher les documentations, j'ai fouill√© un peu sur la toile. C'est l√† que j'ai d√©couvert le travail\nde <a href=\"https://github.com/le0pard\">Alexey Vasiliev (@leOpard)</a> qui propose un g√©n√©rateur de configuration\nPostgres : <a href=\"https://pgtune.leopard.in.ua/#/\">PGTune</a></p>\n<p>Il suffit de param√©trer votre configuration en fonction des ressources que vous voulez allouer sur le serveur! Et PAF √ßa\nfait le ‚òï!</p>\n<p><img src=\"/static/images/post/capture-pgtune.png\" alt=\"PGTune capture\"></p>\n<p>Il ne vous reste plus qu'√† injecter cette nouvelle configuration dans le fichier de configuration de votre Postgres.</p>\n<p>Depuis que j'ai appliqu√© la configuration par l'utilitaire, je n'ai plus de probl√®me de performance. Finalement, les utilisateurs sont\ncontents, et moi aussi üòÉ.</p>\n<p>Pour les fans de <a href=\"https://www.ruby-lang.org/fr/\">Ruby</a>, o√π si cela vous amuse, vous pouvez aller consulter le code du\ng√©n√©rateur de @leOpard, les sources sont disponibles sur\nGithub : <a href=\"https://github.com/le0pard/pgtune\">https://github.com/le0pard/pgtune</a></p>\n"},{"id":"giboow-le-blog","author":"giboow","title":"Giboow, le Blog!","date":"2020-11-25","keywords":["Blog","TheBeginning","Objectifs"],"image":"/static/images/post/hello-image.webp","contentHtml":"<p>Je m'appelle Philippe, j'ai 36 ans, j'ai une petite famille ainsi qu'un chat et deux poules!\nJe suis d√©veloppeur d'application depuis une bonne quinzaine d'ann√©es. Le d√©veloppement et la technologie occupent donc\nune bonne partie de mes journ√©es !</p>\n<p>J'ai toujours aim√© la programmation et la logique qui en d√©coule. J'ai commenc√© ma carri√®re au coll√®ge en 4e, lorsque\nmon grand fr√®re m'a offert une calculatrice Casio graphique, depuis ce jour l√† j'ai d√©couvert les bases de la\nprogrammation ! √Ä 13 ans, nous avons re√ßu notre premier ordinateur, c'√©tait un Apple Performa 6320, au bout d‚Äôun mois\nnous avons d√©mont√© la b√™te avec mon fr√®re pour voir comment cela fonctionnait !\nJ'ai ensuite continu√© mon √©volution tranquillement avec des pages HTML statiques, des Apple script, etc...</p>\n<p>Pendant mes\n√©tudes j'ai beaucoup travaill√© sur Linux j'ai donc une bonne connaissance de ce syst√®me et de son fonctionnement, je ne\nsuis cependant pas un expert (mais je me d√©brouille toujours üòÉ).</p>\n<p>En 2009, j'ai commenc√© ma carri√®re professionnelle. J'ai toujours voulu naviguer sur diff√©rents projets, apprendre de\nnouvelles choses. Je d√©teste le fait d'√™tre consid√©r√© comme un expert dans une technologie pr√©cise. J'aime apprendre de\nnouvelles choses, maitriser l'ensemble de mes projets, et de partager mes connaissances avec mes amis, mes coll√®gues,\nvous !</p>\n<p>Sur ce blog con√ßut et r√©aliser avec ‚ô•, je vais essayer de vous partager mon quotidien (du code, du code, du code!!),\nmais aussi tout ce que je trouve int√©ressant sur la toile et relatif a mon m√©tier (application, librairies, hardware,\nnews, etc.) !</p>\n<p>Ce site va √™tre aussi pour moi, un bon moyen pour (re)d√©couvrir ReactJs ainsi que NextJs. J'ai en effet eu l'occasion de\nmanipuler ces deux frameworks, mais sans jamais proposer une version disponible publiquement.</p>\n"}]},"__N_SSG":true}