{"pageProps":{"postData":{"id":"postgresql-optim-requete-geoloc","contentHtml":"<p>Récemment j’ai voulu créer une petite application mobile qui permet de rechercher les boîtes aux lettres qui sont autour de la géolocalisation utilisateur. D’autres apps existent, mais leurs performances n’étaient pas vraiment au rendez-vous, alors j’ai voulu tenter de trouver des solutions!</p>\n<p>Pour commencer, j’ai réussi à récupérer un jeu de donnée sur le site <a href=\"http://data.gouv.fr/\">data.gouv.fr</a> : <a href=\"https://www.data.gouv.fr/fr/datasets/liste-des-boites-aux-lettres-de-rue-france-metropolitaine-et-dom-avec-heure-limite-de-depot-1/\">https://www.data.gouv.fr/fr/datasets/liste-des-boites-aux-lettres-de-rue-france-metropolitaine-et-dom-avec-heure-limite-de-depot-1/</a> . Ce jeu de données comporte 140 000 entrées, bien sûr l’utilisateur qui va vouloir afficher les boîtes aux lettres proches de lui, n’aura pas besoin d’afficher toutes les boîtes disponibles dans la base de données, mais seulement celles proches de lui, par exemple 10km.</p>\n<p>Pour mon projet j’utilise une API SpringBoot, mais ce n’est pas ce qui va vous intéresser aujourd’hui. Le vrai problème c’est comment récupérer l’ensemble des données, stockées dans une base de données PostgreSQL, qui sont géolocalisées proche d’un point dans un temps convenable!</p>\n<h2>L’objectif</h2>\n<p>Mon objectif est donc de trouver un ensemble de points qui se trouvent dans un rayon de 10km, en un temps record!</p>\n<p><img src=\"/static/images/post/postgres-geoloc-optim.png\" alt=\"Objectif de la requete\"></p>\n<h2>PostGIS à la rescousse</h2>\n<p>PostGIS est une extension de PostgreSQL, elle permet d’offrir de nouvelle fonction et des types de données qui facilitent les recherches géolocalisées.</p>\n<p>Pour installer PostGIS sur son serveur :</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">~$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> postgis\n</code></pre></div>\n<p>Il faut ensuite l’activer dans PosgresSQL, en se connectant à la base de données et en ajoutant l’extension <strong>postgis</strong>. Elle sera donc active uniquement dans la base de données sélectionnée.</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\">psql <span class=\"token punctuation\">(</span><span class=\"token number\">13.6</span> <span class=\"token punctuation\">(</span>Ubuntu <span class=\"token number\">13.6</span><span class=\"token operator\">-</span><span class=\"token number\">0</span>ubuntu0<span class=\"token punctuation\">.</span><span class=\"token number\">21.10</span><span class=\"token number\">.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">Type</span> <span class=\"token string\">\"help\"</span> <span class=\"token keyword\">for</span> help<span class=\"token punctuation\">.</span>\n\npostgres<span class=\"token operator\">=</span><span class=\"token comment\"># \\c test;</span>\npostgres<span class=\"token operator\">=</span><span class=\"token comment\"># CREATE EXTENSION postgis;</span>\n</code></pre></div>\n<p>Nous pouvons maintenant créer une table qui contient un id, une latitude, une longitude ainsi qu’un point GPS.  La valeur du SRID <strong>4326</strong>  permet de déclarer un point utilisant le système de référence spatiale géographique.</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">public</span><span class=\"token punctuation\">.</span>test <span class=\"token punctuation\">(</span>\n    id bigserial <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    lat <span class=\"token keyword\">real</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    long <span class=\"token keyword\">real</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    location geography<span class=\"token punctuation\">(</span><span class=\"token keyword\">Point</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4326</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>On peut alors facilement ajouter un point en utilisant la requête suivante :</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> test <span class=\"token punctuation\">(</span>lat<span class=\"token punctuation\">,</span> long<span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token number\">49.548462</span><span class=\"token punctuation\">,</span><span class=\"token number\">1.0779799</span><span class=\"token punctuation\">,</span>ST_SetSRID<span class=\"token punctuation\">(</span>ST_MakePoint<span class=\"token punctuation\">(</span><span class=\"token number\">49.548462</span><span class=\"token punctuation\">,</span><span class=\"token number\">1.0779799</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4326</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>Optimisation</h2>\n<p>Pour valider mon optimisation, j’ai ajouté à ma table 140 000 lignes de données géolocalisées.</p>\n<p>Bêtement j’ai voulu rechercher tous les points qui se trouvaient dans un rayon de moins de 10km avec la fonction <strong>st_distancesphere</strong>.</p>\n<p>Voici la requête que j’exécute pour récupérer tous les points GPS dans un rayon de 10km :</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">EXPLAIN</span><span class=\"token punctuation\">(</span>ANALYSE <span class=\"token punctuation\">,</span> BUFFERS <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span> st_distancesphere<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>location::<span class=\"token keyword\">geometry</span><span class=\"token punctuation\">,</span>ST_SetSRID<span class=\"token punctuation\">(</span>ST_MakePoint<span class=\"token punctuation\">(</span><span class=\"token number\">49.548462</span><span class=\"token punctuation\">,</span><span class=\"token number\">1.0779799</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4326</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> test t\n<span class=\"token keyword\">WHERE</span>\nst_distancesphere<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>location::<span class=\"token keyword\">geometry</span><span class=\"token punctuation\">,</span>ST_SetSRID<span class=\"token punctuation\">(</span>ST_MakePoint<span class=\"token punctuation\">(</span><span class=\"token number\">49.548462</span><span class=\"token punctuation\">,</span><span class=\"token number\">1.0779799</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4326</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>L’analyser de requête de PostgeSQL montre bien qu’aucun index n’est utilisé et que la requête prend 463ms pour renvoyer 21 points qui correspondes aux conditions.</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\">Gather  <span class=\"token punctuation\">(</span>cost<span class=\"token operator\">=</span><span class=\"token number\">1000.00</span><span class=\"token punctuation\">.</span><span class=\"token number\">.2776968</span><span class=\"token number\">.00</span> <span class=\"token keyword\">rows</span><span class=\"token operator\">=</span><span class=\"token number\">47062</span> width<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>actual <span class=\"token keyword\">time</span><span class=\"token operator\">=</span><span class=\"token number\">160.851</span><span class=\"token punctuation\">.</span><span class=\"token number\">.461</span><span class=\"token number\">.391</span> <span class=\"token keyword\">rows</span><span class=\"token operator\">=</span><span class=\"token number\">115</span> loops<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  Workers Planned: <span class=\"token number\">1</span>\n  Workers Launched: <span class=\"token number\">1</span>\n  Buffers: shared hit<span class=\"token operator\">=</span><span class=\"token number\">1759</span>\n  <span class=\"token operator\">-</span><span class=\"token operator\">></span>  Parallel Seq Scan <span class=\"token keyword\">on</span> test t  <span class=\"token punctuation\">(</span>cost<span class=\"token operator\">=</span><span class=\"token number\">0.00</span><span class=\"token punctuation\">.</span><span class=\"token number\">.2771261</span><span class=\"token number\">.80</span> <span class=\"token keyword\">rows</span><span class=\"token operator\">=</span><span class=\"token number\">27684</span> width<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>actual <span class=\"token keyword\">time</span><span class=\"token operator\">=</span><span class=\"token number\">218.887</span><span class=\"token punctuation\">.</span><span class=\"token number\">.415</span><span class=\"token number\">.046</span> <span class=\"token keyword\">rows</span><span class=\"token operator\">=</span><span class=\"token number\">58</span> loops<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">\"        Filter: (st_distance(geography((location)::geometry), '0101000020E6100000A48CB80034C64840F5EC03DA673FF13F'::geography, false) &#x3C; '10000'::double precision)\"</span>\n        <span class=\"token keyword\">Rows</span> Removed <span class=\"token keyword\">by</span> Filter: <span class=\"token number\">70535</span>\n        Buffers: shared hit<span class=\"token operator\">=</span><span class=\"token number\">1759</span>\nPlanning <span class=\"token keyword\">Time</span>: <span class=\"token number\">0.376</span> ms\nJIT:\n  Functions: <span class=\"token number\">8</span>\n<span class=\"token string\">\"  Options: Inlining true, Optimization true, Expressions true, Deforming true\"</span>\n<span class=\"token string\">\"  Timing: Generation 2.485 ms, Inlining 178.841 ms, Optimization 117.797 ms, Emission 56.983 ms, Total 356.106 ms\"</span>\nExecution <span class=\"token keyword\">Time</span>: <span class=\"token number\">463.431</span> ms\n</code></pre></div>\n<p>Nous allons donc créer un index qui va permettre d’accélérer la requête (voir  la doc <a href=\"http://postgis.net/workshops/postgis-intro/indexing.html\">http://postgis.net/workshops/postgis-intro/indexing.html</a>):</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> test_position_geography_index <span class=\"token keyword\">ON</span> test <span class=\"token keyword\">USING</span> GIST<span class=\"token punctuation\">(</span>geography<span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Mais nous allons avoir une mauvaise surprise, car l’index ne fonctionne toujours pas. Après une recherche rapide, je me suis aperçu qu’il n’y a que certaines fonctions de PostGIS qui peuvent utiliser l’indexation (voir la doc ici : <a href=\"http://postgis.net/workshops/postgis-intro/indexing.html#spatially-indexed-functions\">http://postgis.net/workshops/postgis-intro/indexing.html#spatially-indexed-functions</a>).</p>\n<p>Je décide donc d’utiliser la fonction ST_DWithin qui renvoie un vrai si deux points se trouvent bien à la distance passée dans le 3e paramètre.</p>\n<p>Voici donc la requête suivie de l’analyse :</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">EXPLAIN</span><span class=\"token punctuation\">(</span>ANALYSE <span class=\"token punctuation\">,</span> BUFFERS <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span> st_distancesphere<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>location::<span class=\"token keyword\">geometry</span><span class=\"token punctuation\">,</span>ST_SetSRID<span class=\"token punctuation\">(</span>ST_MakePoint<span class=\"token punctuation\">(</span><span class=\"token number\">49.548462</span><span class=\"token punctuation\">,</span><span class=\"token number\">1.0779799</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4326</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> test t\n<span class=\"token keyword\">WHERE</span>\n   ST_DWithin<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">,</span> ST_SetSRID<span class=\"token punctuation\">(</span>ST_MakePoint<span class=\"token punctuation\">(</span><span class=\"token number\">49.548462</span><span class=\"token punctuation\">,</span><span class=\"token number\">1.0779799</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4326</span><span class=\"token punctuation\">)</span>::geography<span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\">Bitmap Heap Scan <span class=\"token keyword\">on</span> test t  <span class=\"token punctuation\">(</span>cost<span class=\"token operator\">=</span><span class=\"token number\">4.95</span><span class=\"token punctuation\">.</span><span class=\"token number\">.2390</span><span class=\"token number\">.34</span> <span class=\"token keyword\">rows</span><span class=\"token operator\">=</span><span class=\"token number\">14</span> width<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>actual <span class=\"token keyword\">time</span><span class=\"token operator\">=</span><span class=\"token number\">1.212</span><span class=\"token punctuation\">.</span><span class=\"token number\">.2</span><span class=\"token number\">.205</span> <span class=\"token keyword\">rows</span><span class=\"token operator\">=</span><span class=\"token number\">115</span> loops<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">\"  Filter: st_dwithin(location, '0101000020E6100000A48CB80034C64840F5EC03DA673FF13F'::geography, '10000'::double precision, true)\"</span>\n  <span class=\"token keyword\">Rows</span> Removed <span class=\"token keyword\">by</span> Filter: <span class=\"token number\">200</span>\n  Heap Blocks: exact<span class=\"token operator\">=</span><span class=\"token number\">150</span>\n  Buffers: shared hit<span class=\"token operator\">=</span><span class=\"token number\">188</span>\n  <span class=\"token operator\">-</span><span class=\"token operator\">></span>  Bitmap <span class=\"token keyword\">Index</span> Scan <span class=\"token keyword\">on</span> test_position_geography_index  <span class=\"token punctuation\">(</span>cost<span class=\"token operator\">=</span><span class=\"token number\">0.00</span><span class=\"token punctuation\">.</span><span class=\"token number\">.4</span><span class=\"token number\">.95</span> <span class=\"token keyword\">rows</span><span class=\"token operator\">=</span><span class=\"token number\">72</span> width<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>actual <span class=\"token keyword\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.288</span><span class=\"token punctuation\">.</span><span class=\"token number\">.0</span><span class=\"token number\">.288</span> <span class=\"token keyword\">rows</span><span class=\"token operator\">=</span><span class=\"token number\">315</span> loops<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">\"        Index Cond: (location &#x26;&#x26; _st_expand('0101000020E6100000A48CB80034C64840F5EC03DA673FF13F'::geography, '10000'::double precision))\"</span>\n        Buffers: shared hit<span class=\"token operator\">=</span><span class=\"token number\">26</span>\nPlanning <span class=\"token keyword\">Time</span>: <span class=\"token number\">0.446</span> ms\nExecution <span class=\"token keyword\">Time</span>: <span class=\"token number\">2.288</span> ms\n</code></pre></div>\n<p>On voit bien que l’index <strong>test_position_geography_index</strong> est utilisé et qu’il permet de récupérer les 21 points en <strong>2.288ms</strong> 🤯. ****Le gain est énorme, il permet de réduire considérablement le temps d’exécution et le temps d’utilisation processeur.</p>\n<h2>Bilan</h2>\n<p>Dans mon API de géolocalisation de boîtes aux lettres, cela m’a permis de diviser par 10 le temps de requête et de soulager le serveur lorsque je simulais une charge serveur avec l’outil de tests de performance d’Apache <strong>ab</strong> (<a href=\"https://httpd.apache.org/docs/2.4/fr/programs/ab.html\">https://httpd.apache.org/docs/2.4/fr/programs/ab.html</a>).</p>\n","author":"giboow","title":"PostgreSQL - Comment booster ses recherches de point géolocalisé","date":"2022-03-24","keywords":["PostgreSQL","PostGIS","Latitude","Longitude","Optimisation","SQL"],"image":"/static/images/post/postgres-geoloc-optim.png","summary":"Récemment j’ai voulu créer une petite application mobile qui permet de rechercher les boîtes aux lettres qui sont autour de la géolocalisation utilisateur. D’autres apps existent, mais leurs performances n’étaient pas vraiment au rendez-vous, alors j’ai voulu tenter de trouver des solutions","readingTime":4}},"__N_SSG":true}